2024-02-02  시작
참고 페이지 
    https://react-ko.dev/reference/react/useReducer
    https://www.youtube.com/@starcoding\

                                    -React Hook-
                        React Hook 은 최상위 레벨에서만 사용 가능
State Hook

2024-02-02

    💋useState(initialState) : state 변수를 추가할 수 있게 하는 React Hook

        컴포넌트 최상위 레벨에서 useState 호출 state변수를 선언
            ex ) const [age,setAge] = useState(20);
        반환값
            1.현재 state
            2. state를 다른 값으로 업데이트 하고 리렌더링을 촉발할 수 있는 set(설정자) 함수
                ex )const [age,setAge] = useState(20);
                    const [name,setName] = useState('Cho');
                function handleClick(){
                    setName('CHO');
                    setAge( a=> a + 1);
                    console.log(name) ; // Still "Cho" !!!
                                        // 아직 "Cho"  
                }
                설정자 함수 Set 은 반환값이 없다. 값을 설정만 해주는 역할

                💡 중요 💡
                    // set 함수를 호출해도 이미 실행중인 코드의 state 는 변경되지 않습니다.!
                    // set 함수는 다음 렌더링에서 반환할 useState에만 영향을 줍니다.

                    age : 25 가정
                    function handleClick(){
                        set(age + 1 )// setAge(25 +1)
                        set(age + 1 )// setAge(25 +1)
                        set(age + 1 )// setAge(25 +1)
                    } >> 결과는 28이 아니라 26
                    28을 만들고 싶다면
                    업데이터 함수
                    function handleClick(){
                        setAge( a => a + 1) ; // setAge(25 => 26) 기존값에서 1을 더하기
                        setAge( a => a + 1) ; // setAge(26 => 27) 기존값에서 1을 더하기
                        setAge( a => a + 1) ; // setAge(27 => 28) 기존값에서 1을 더하기
                    }

2024-02-02

    💋useReducer(reducer ,initialArg , init?)

        여러개의 하위 값을 지닌 state를 다룰 때 useReducer 를 사용하면 좋다
        Reducer Action Dispatch 세 가지 알기
        처리     행동     요구



            ex ) (함수명 , {age : 25})
        state에서 좀 더 업데이트 된 기능
        반환값 
            1. 현재 state , 첫 번째 렌더링 중에는 init(initialArg) 또는 (init이 없는 경우) initialArg로 설정
            2. state 를 다른 값으로 업데이트 하고 재렌더링을 트리거 할 수 있는 dispatch funtion

        사용법
            import { useReducer } from 'react'

            function reducer(state , action){
                //...
            }

            function MyComponent() {
                const [state , dispatch] =useReducer(reducer,{ age : 25 })
            //....

Context Hook

2024-02-02

    💋useContext (🎈UsContext 참고🎈) 부모에서 자식 컴퍼넌트로 props 를 전달 하기 위한 ReactHook
        
        광범위한 파일구조에서 일일히 넘겨주기 힘들기 때문에 전역변수 같이 하위 컴포넌트에서 선언만 해주면 사용가능

        가장 하위에 있는 컴포넌트에서만 props 가 필요할떄 useContext를 사용하지 않는다면 모든 부모 컴포넌트를 통해 props를 
        전달 받아야하는 번거로움이 있다

        Context 를 사용하면 컴포넌트를 재사용하기 어려워 질 수 있다.
        

Ref Hook

2024-02-05

    💋useRef(initialValue) 렌더링에 필요하지 않는 값을 참조할 수 있는 React 훅

        ex ) useRef(0);
             useRef(null);  
        ref.current 프로퍼티는 state 와 달리 변이할 수 있다.

        1. (렌더링할 때마다 재설정되는 일반 변수와 달리)리렌더링 사이에 정보를 저장할 수 있다.
        2. (리렌더링을 촉발하는 state 변수와 달리) 변경해도 리렌더링을 촉발하지 않습니다.
        3. (정보가 공유되는 외부 변수와 달리) 각각의 컴포넌트에 로컬로 저장됩니다.
                                                                >>>>>> 컴포넌트에 저장되진 않는다.
        /* useRef 직접구현 */
        /* const myRef = useRef(initialValue); */
        const useRef = (value) =>{
            /* const [ref , unused] = useState ({ current : value })  와 같다*/
            const [ref] = useState({ current : value })
            return ref
        }


        함수형 컴포넌트에서 userRef 를 호출하면 ref object 를 반환해시켜준다.
        const ref = useRef(value);
            >> ref >>>>>> { current : value } : 수정이 가능 하기에 언제든 원하는 값으로 바꿔줄 수 있다.
        
        1.저장공간으로 사용하기 용이 (🎈UsRef 참고🎈)
        State의 변화 > 렌더링 > 컴포넌트 내부 변수들 초기화
        Ref > No 렌더링 > 변수들의 값이 유지됨
        State의 변화 > 렌더링 > Ref 유지됨
              변경시 렌더링을 발생시키지 않아야 할 경우에 사용하기에 용이하다.

        2. Dom 요소에 접근 >>> (🎈UsRefVer2 참고🎈)
            ex )  Ref >> focus() input 요소에 접근 용이
               바닐라 자바스크립트의  Document.querySelector()와 비슷

    💋forwardRef 부모 컴포넌트에서 자녀 컴포넌트에 접근해야할 때 사용
    
        폼에서 곧바로 ref 를 사용하지 못하고 하위에 있는 컴포넌트한테 Ref 를 넘겨주고 싶을 때 forwardRef 사용가능
            ex) 
    1.      
        import { forwardRef , useRef } from 'react

        const MyInput = forwardRef((props , ref) =>{
                return <input {...props} ref = {ref} />;
            });

            export default function Form() {
                const inputRef = useRef(null);
            
            function handleClick(){
                inputRef.current.focus();
            };
            return(
                <>
                <MyInput ref={inputRef} />
                <button onClick={handleClick}>
                    Focus the input
                    </button>
                </>
            );
        };

    2. 
    import { forwardRef } from 'react

    const MyInput = forwardRef(({ value , onChange} , ref) =>{
        return (
            <input
                value{value}
                onChange={onChange}
                ref={ref}
            />
        );
    });

    export default MyInput;

2024-02-05

    💋useimperativehandle ( ref , createHandle , dependencies ? )

        사용자가 정의한 Input 컴포넌트에 ref를 전달하고 싶을 때 사용합니다.
        ref를 사용하려면 Input 컴포넌트를 React.forwardRef로 수정한 뒤 useImperativeHandle을 사용하여 부모 컴포넌트에서 ref를 핸들링할 수 있도록 해야합니다.

        ref 로 노출되는 핸들을 사용자가 직접 정의할 수 있게 해주는 React Hook
        useimperativehandle 은 undefined 를 반환

    상위 컴포넌트에게 노출하고 싶은 메서드만 노출하기 위해 사용하는 Hook 이므로 forwardRef 를 사용

        예를 들어 <input> DOM 노드를 노출하지 않고 focus 와 scrollIntoView 의 두 메서드만 노출하고 싶을 때
            ex ) 
            import { forwardRef , userRef , useimperativehandle} from 'react'

            const MyInput = forwardRef(function MyInput (props , ref) {
                const inputRef =useRef(null);

                useImperativeHandle( ref, () =>{
                    return {
                        focus () {
                            inputRef.current.focus();
                        },
                        scrollIntoView() {
                            inputRef.current.scrollIntoView();
                        },
                    };
                },[]);

                return <input {...props} ref={inputRef} />;

            });
            
            export default MyInput;
            

Effect Hook

2024-02-05

    💋useEffect(() =>{}) 기본적으로 인자로 callback 함수를 받는다.
                
        어떠한 컴포넌트가  1.Mount(화면에서 첫 렌더링) 됐을 때  2. Update(다시 렌더링) 됐을 떄 3. UnMount(화면에서 사라질 떄) 됐을 때 
            특정 작업을 처리하는 코드를 실행 시키고 싶을 때 사용한다.
        callback 함수 내에 원하는 작업을 처리해줄 코드를 작성해주면 된다.

    1. 렌더링 될 때마다 실행
    useEffect(() => {
        // 작업 ..
    });
    2. 맨 처음 렌더링 될 때 실행 , value 가 바뀔 떄 실행
    useEffect (() =>{
        // 작업 ..
    } , [value]) // dependenciesArray > [value] 가 아닌 [] 빈 배열일 경우 맨 처음 렌더링 될 때만 실행

       2-1 [value1 , value2] >> 맨 처음 렌더링 될 때 실행 , value1 과 value2 가 바뀔 떄 실행 

            https://github.com/cho-git/ReactHook/blob/main/my-app/src/ReactHook/EffectHook/UsEffect.js
            에서 useEffect 파트를 공부하던 중 왜 내 useEffect 는 왜 두 번 실행 될까 ? 
            When Strict Mode is on, in development, React runs setup and cleanup one extra time before the actual setup.
            StrictMode가 켜져 있으면, 개발환경에서 React는 실제 셋업 전에 셋업 및 클린업을 한 번 더 실행합니다.


    반응형 값 :props , 컴포넌트 내부에서 선언된 모든 변수 , 함수

    불필요한 의존성 제거하기 
    function ChatRoom({ roomId }) {

        const [message, setMessage] = useState('');

        const options = { 
        serverUrl: serverUrl,
        roomId: roomId
        };

        useEffect(() => {
          const connection = createConnection(options); 
          connection.connect();
          return () => connection.disconnect();
        }, [options]);
    } 
    // 이런 경우 useEffect 가 렌더링 중에 생성된 객체를 의존하는 경우 필요 이상으로 자주 실행 될수 있다
    // 렌더링 중에 객체를 의존성에 사용하지 말고 useEffect 안에서 객체를 생성하자
    useEffect(() => {
         const options = {
           serverUrl: serverUrl,
           roomId: roomId
         };
         const connection = createConnection(options);
         connection.connect();
         return () => connection.disconnect();
    }, [roomId]);
    // 함수 일 경우에도 마찬가지. 

2024-02-06
    //?useEffectEvent?가 뭐지//

2024-02-06
    💋useLayoutEffect( setup , dependencies? )는 브라우저가 화면을 다시 채우기 전에 실행되는 버전의 useEffect
        useEffect와 비슷한 부분이 많으므로 간략
                >> useLayoutEffect 를 호출하여 레이아웃을 측정
                >> Hook 이므로 최상위 레벨에서 호출
                >> 반환값 undefined
            useLayoutEffect 내부의 코드와 여기에서 예약된 모든 상태 없데이트는 브라우저가 화면을 다시 그리는 것을 차단.
                >> useEffect 는 차단하지 않음
                과도하게 사용하면 앱이 느려지므로 가급적이면 useEffect를 사용하자
        WhenUse?
            ex ) tooltip의 위치
2024-02-06
    💋useInsertionEffect( setup , dependencies? ) CSS-in-JS 라이브러리에서 작업 중이고 스타일을 주입할 위치가 필요하다면
            useEffect 혹은 useLayoutEffect 를 사용
                                ㄴ DOM 변경 전에 스타일을 주입..
                                


Performance Hook

2024-02-06
     Optimization(최적화) 를 위한 대표적인 ReactHook 
                                            useMemo , useCallback
   💋useMemo
        동일한 값을 리턴하는 함수를 반복적으로 호출해야 할 경우
         맨처음 값을 계산할 때 해당 값을 메모리에 저장한 뒤 
            다시 계산하지 않고 필요할 때 꺼내쓰는 재사용하는 기법

        
        Memo = Memoization  >>>>> 함수를 메모리에 할당해서 사용하기 때문에 무분별한 사용은 오히려 메모리 성능에 저하를 일으킬 수 있다 .
                                    필요한 경우에만 사용하자.
            반환 값을 캐싱하는 것을 메모화 , 이것이 useMemo를 활용하는 이유

        간단히 말해서 useMemo 는 의존성이 변경되기 전까지 계산 결과를 캐시합니다.

        ex ) funtion Component() {
            const value = useMemo (()=> calculate() ,[]
            )
            return <div>{value}</div>
        }
        구조 const value = useMemo (()=> calculate() ,[] )
                                    ㄴ 첫 번째 인자 callback함수 , 두 번째 인자는 배열
        
        💡 중요 💡
        // UsMemoVer2참고 !여기서! 원시(Primitive) 타입과 객체(Object) 타입에 대해서 알아보자
        javaScript 타입은 아래가 있다. (P. / O. 로 부르겠음)
            1.원시(Primitive)             2.객체(Object)
                String                      Object
                Number                      Array
                Boolean                      ...
                Null
                UndeFined
                BigInt
                Symbol

        P. const location ="korea" >>>> location 에 "korea" 가 담긴다
        O. const location = {country : "korea"} 경우 >>>>> location #12345 라는 메모리상의 공간이 할당되고 
                    변수안에는 그 객체가 담긴 메모리의 주소가 할당된다  #12345 {country : "korea"}
            
        P. 
        const locationOne = "korea"
        const locationTwo = "korea"
            locationOne === locationTwo > true
        O.
        const locationOne ={
            country :"korea"
        }
        const locationTwo ={
            country :"korea"
        }
            locationOne === locationTwo > false
        // 변수 안에는 메모리 상의 주소가 들어있기 떄문에 두 객체는 다른 주소를 비교하기에 false 가 나온다 !!!!!!!!!!!!


2024-02-06
    💋useCallback [ Optimization(최적화) , Memoization ]
        const calculate = useCallback(() => {
            return + 1;
        },[item]) 
         구조 ㄴ 첫 번째 인자 callback함수 , 두 번째 인자는 배열
            useCallback으로 calculate함수를 이용해 메모리에 함수를 Memoization 후 필요할 때마다 메모리에서 가져와 재사용
    
    function Component(){
        const calculate = ( num ) => {
            return num + 1
        }
        return <div> {value} </div>
    }
    react 에서 <Component/> 렌더링이 되면 Component 함수 호출 > 모든 내부 변수 초기화
    function Component(){
        const calculate = useCallback(( num ) => {
            return num + 1
        },[item]);
        return <div> {value} </div>
    }

번외 ) 공부하다 React.Memo 에 대해 발견해 추가로 작성 
2024-02-06
    불필요한 렌더링을 막을 방법이 없을까 ? 
    React.Memo(Memoization) 
        는 Higher-Order Components(HOC) 고착 컴포넌트이다.
            보통 컴포넌트 > React.Memo > 최적화된 컴포넌트
        꼭 필요할 때만 사용 ! 메모이징을 통해 메모리를 사용하기 떄문에!
            1 ) 컴포넌트가 같은 Props로 자주 렌더링 될 때
            2 ) 컴포넌트가 렌더링이 될때마다 복잡한 로직을 처리해야한다면        
        React.Memo는 오직 Props 변화에만 의존하는 최적화 방법입니다.
        
        1.React.Memo + useMemo  MemoUsMemo.js 참고
        2.React.Memo  + useCallback  를 사용해보자  MemoUsCallback.js 참고

    💋useTransition 동시성 기능과 지연된 사용자 인터페이스에서 발생하는 문제해결
        const [isPending , startTransition] =useTransition();
                ㄴ 현재 보류 중인 일부 상태 업데이트가 있는지 여부를 알려줌
                    ex )   {isPending && <p>Updating List...</p>}
    💋useDeferredValue 동시성 기능과 지연된 사용자 인터페이스에서 발생하는 문제해결
        값이 위에서 제공되고 해당 setState 호출을 제어할 수 없는 경우에 사용



BrowserRouter >> npm install react-router-dom
     웹 화면에서 메뉴, 특정 주소를 입력 시 화면 전환인 라우팅 처리를 위한 react-router-dom
     

번외 React 의 느낌
    참고 https://www.youtube.com/watch?v=xnk_1Q1O5ro&list=PLjQV3hketAJkh6BEl0n4PDS_2fBd0cS9v&t=728s
        35분35초.인용함
        서버에서 삐쩍 마른 트리(나무)를 html 형태로 클라이언트로 전달

        <ul>                        >>하드코딩
            <li>홍길동</li>
            <li>Cho</li>
        </ul>

        정적 데이터를 그린 html ... 죽어있음

        클라이언트는 온갖 정보들 (영양소)을 나무에 뿌림

        const members = ['홍길동', 'Cho] 

        <ul>
            {members.map(m =><li>{m}</li>)}   
        </ul>

        이제 나무가 꽃을 피우고 잎이 납니다.. 다시 살아남..

        hydration 물주기 수화작용